import org.sireum.logika._

// http://logika.sireum.org/doc/03-language/programming/index.html and https://www.javatpoint.com/computer-graphics-bresenhams-line-algorithm
def lineVerification(x0: Z, y0: Z, x1: Z, y1: Z): Z = {
// Goal: iterate with bresenham without drawing the pixels
    l"""{ requires x0 > 0
                   x1 > 0
                   x1 > x0
                   y0 > 0
                   y1 > 0
                   y1 > y0
          ensures result == (x1 + y1)
    }"""
    var x: Z = x0
    var y: Z = y0
    var dx: Z = x1 - x0
    var dy: Z = y1 - y0
    var p: Z = 2 * dy - dx


    l"""{
        1. dx == x1 - x0  premise
        2. dy == y1 - y0  premise
        3. p == 2 * dy - dx  premise
        4. p == 2 * (y1 - y0) - (x1-x0)  algebra 1 2 3
        5. y == y0 premise
        6. y1 > y0 premise
        7. y1 > y algebra 5 6
        8. x == x0 premise
        9. x1 > x0 premise
        10. x1 > x algebra 8 9
    }"""

    while (x1 > x & y1 > y) {
        l"""{  //  loop-invariant can be added and must be true each time you go to check the loop condition
               modifies x, y, p
        }"""

        assume(y1 > y)
        assume(x1 > x)

        if(p >= 0){
        var yNext: Z = y + 1
        l"""{
            1. yNext == y + 1 premise
            2. yNext > y algebra 1
            3. y0 > 0 premise
            4. y1 > 0 premise
            5. y1 > y premise
            6. y1 >= yNext algebra 1 5
        }"""
           y = y + 1
           p = p + 2 * dy - 2 * dx
        } else {
        var xNext: Z = x + 1
        l"""{
            1. xNext == x + 1 premise
            2. xNext > x algebra 1
            3. x0 > 0 premise
            4. x1 > 0 premise
            5. x1 > x premise
            6. x1 >= xNext algebra 1 5
        }"""
           x = x + 1
           p = p + 2 * dy
        }
      }

      l"""{
            
      }"""


      return (x + y)

}


val x0: Z = readInt()
val x1: Z = readInt()
val y0: Z = readInt()
val y1: Z = readInt()

assume(x0 > 0)
assume(y0 > 0)
assume(x1 > 0)
assume(y1 > 0)
assume(y1 > y0)
assume(x1 > x0)

val r: Z = lineVerification(x0,y0,x1,y1)
assert(r == (x1 + y1))


